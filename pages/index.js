import { AnimatePresence } from 'framer-motion';
import { getSession, useSession } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useRecoilState } from 'recoil';
import { modalState, modalTypeState } from '../atoms/modalAtom';
import Feed from '../components/Feed';
import Header from '../components/Header';
import Modal from '../components/Modal';
import Sidebar from '../components/Sidebar';

export default function Home() {
    const [modalOpen, setModalOpen] = useRecoilState(modalState);
    const [modalType, setModalType] = useRecoilState(modalTypeState);
    const router = useRouter(); //useRouter for client side, redirect for server
    const { status } = useSession({
        required: true,
        onUnauthenticated() {
            // The user is not authenticated, handle it here.
            router.push('/home')
        },
    })
    if (status === "loading") {
        return "Loading or not authenticated..."
    }

    return (
        <div className='bg-[#F3F2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6'>
            <Head>
                <title>Feed | LinkedIn</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Header />

            <main className='flex justify-center gap-x-5 px-4 sm:px-12'>
                <div className='flex flex-col md:flex-row gap-5'>
                    {/* sidebar */}
                    <Sidebar />
                    {/* feed */}
                    <Feed />
                </div>

                {/* widgets */}
                <AnimatePresence>
                    {modalOpen && (
                        <Modal handleClose={() => setModalOpen(false)} type={modalType} />
                    )}
                </AnimatePresence>
            </main>
        </div>
    )
}

export async function getServerSideProps(ctx) {
    // if the user authenticated in the server
    const session = await getSession(ctx);
    if (!session) {
        return {
            redirect: {
                permanent: false,
                destination: '/home',
            }
        }
    }
    return {
        props: {
            session,
        }
    }
}
